# RUN: llc -mtriple=mos6502 -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @.str = constant [1 x i8] c"X"
  define void @addimm() {
    entry:
      ret void
  }
  define void @cmpimm_brne() {
    entry:
      ret void
  }
  define void @cmpimm_brult() {
    entry:
      ret void
  }
  define void @copy() {
    entry:
      ret void
  }
  define void @ldcimm() {
    entry:
      ret void
  }
  define void @ldimm() {
    entry:
      ret void
  }
  define void @ldimm_global() {
    entry:
      ret void
  }
  define void @load() {
    entry:
      ret void
  }
  define void @uadde_imm() {
    entry:
      ret void
  }
  define void @unmerge() {
    entry:
      ret void
  }
---
name: addimm
# CHECK-LABEL: name: addimm
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_IMPLICIT_DEF
    %1:any(s8) = G_CONSTANT i8 42
    %2:any(s8) = G_ADD %0:any(s8), %1:any(s8)
    RTS implicit %2
# CHECK:      LDCimm 0
# CHECK-NEXT: %3:anyi1 = COPY $c
# CHECK-NEXT: $c = COPY %3
# CHECK-NEXT: $a = COPY %0
# CHECK-NEXT: ADCimm 42
# CHECK-NEXT: %2:anyi8 = COPY $a
# CHECK-NEXT: %4:anyi1 = COPY $c
...
---
name: cmpimm_brne
# CHECK-LABEL: name: cmpimm_brne
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_IMPLICIT_DEF
    %1:any(s8) = G_CONSTANT i8 42
    %2:any(s1) = G_ICMP intpred(ne), %0, %1
    G_BRCOND %2, %bb.0
    RTS
# CHECK:      CMPimm %0, 42
# CHECK-NEXT: BR %bb.0, $z, 0
...
---
name: cmpimm_brult
# CHECK-LABEL: name: cmpimm_brult
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_IMPLICIT_DEF
    %1:any(s8) = G_CONSTANT i8 42
    %2:any(s1) = G_ICMP intpred(ult), %0, %1
    G_BRCOND %2, %bb.0
    RTS
# CHECK:      CMPimm %0, 42
# CHECK-NEXT: BR %bb.0, $n, 1
...
---
name: copy
# CHECK-LABEL: name: copy
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    liveins: $a
    %0:any(s8) = COPY $a
    RTS implicit %0
# CHECK: %0:anyi8 = COPY $a
...
---
name: ldcimm
# CHECK-LABEL: name: ldcimm
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s1) = G_CONSTANT i1 true
    RTS implicit %0
# CHECK:      LDCimm 1
# CHECK-NEXT: %0:anyi1 = COPY $c
...
---
name: ldimm
# CHECK-LABEL: name: ldimm
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_CONSTANT i8 42
    RTS implicit %0
# CHECK:      %0:gpr = LDimm 42
...
---
name: ldimm_global
# CHECK-LABEL: name: ldimm_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(p0) = G_GLOBAL_VALUE @.str
    RTS implicit %0
# CHECK:      %1:gpr = LDimm target-flags(lo) @.str
# CHECK-NEXT: %2:gpr = LDimm target-flags(hi) @.str
# CHECK-NEXT: %0:zp_ptr = REG_SEQUENCE %1, %subreg.sublo, %2, %subreg.subhi
...
---
name: load
# CHECK-LABEL: name: load
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:zp_ptr(p0) = G_IMPLICIT_DEF
    %1:any(s8) = G_LOAD %0:zp_ptr(p0) :: (load 1)
    RTS implicit %1
# CHECK:      $y = LDimm 0
# CHECK-NEXT: LDAyindirr %0
# CHECK-NEXT: %1:anyi8 = COPY $a
...
---
name: uadde_imm
# CHECK-LABEL: name: uadde_imm
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_IMPLICIT_DEF
    %1:any(s8) = G_CONSTANT i8 42
    %2:any(s1) = G_IMPLICIT_DEF
    %3:any(s8), %4:any(s1) = G_UADDE %0:any(s8), %1:any(s8), %2:any(s1)
    RTS implicit %3, implicit %4
# CHECK:      $c = COPY %2
# CHECK-NEXT: $a = COPY %0
# CHECK-NEXT: ADCimm 42
# CHECK-NEXT: %3:anyi8 = COPY $a
# CHECK-NEXT: %4:anyi1 = COPY $c
...
---
name: unmerge
# CHECK-LABEL: name: unmerge
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %1:any(s8), %2:any(s8) = G_UNMERGE_VALUES %0:zp_ptr(s16)
    RTS implicit %1, implicit %2
# CHECK:      %0:anyi8 = COPY %2.sublo
# CHECK-NEXT: %1:anyi8 = COPY %2.subhi
...

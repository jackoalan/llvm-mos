# RUN: llc -run-pass=irtranslator -verify-machineinstrs -o - %s | FileCheck %s
--- |
  target datalayout = "e-p:16:8:8-i16:8:8-i32:8:8-i64:8:8-f32:8:8-f64:8:8-a:8:8-Fi8-n8"
  target triple = "mos6502"

  %twobyte = type { i8, i8 }

  define void @void() {
  ; CHECK-LABEL: name: void
  entry:
  ; CHECK-LABEL: entry:
    ret void
    ; CHECK-NEXT: RTS
  }

  define i8 @ret_i8() {
  ; CHECK-LABEL: name: ret_i8
  entry:
  ; CHECK-LABEL: entry:
    ret i8 42
    ; CHECK-NEXT: %0:_(s8) = G_CONSTANT i8 42
    ; CHECK-NEXT: $a = COPY %0
    ; CHECK-NEXT: RTS implicit $a
  }

  define i16 @ret_i16() {
  ; CHECK-LABEL: name: ret_i16
  entry:
  ; CHECK-LABEL: entry:
    ret i16 1234
    ; CHECK-NEXT: %0:_(s16) = G_CONSTANT i16 1234
    ; CHECK-NEXT: %1:_(s8), %2:_(s8) = G_UNMERGE_VALUES %0
    ; CHECK-NEXT: $a = COPY %1
    ; CHECK-NEXT: $x = COPY %2
    ; CHECK-NEXT: RTS implicit $a, implicit $x
  }

  define void @formal_args_i8(i8 %first, i8 %second, i8 %third, i8 %fourth) {
  ; CHECK-LABEL: name: formal_args_i8
  entry:
  ; CHECK-LABEL: entry:
    ; CHECK-NEXT: liveins: $a, $x, $y, $zp_0
    ret void
    ; CHECK:      %0:_(s8) = COPY $a
    ; CHECK-NEXT: %1:_(s8) = COPY $x
    ; CHECK-NEXT: %2:_(s8) = COPY $y
    ; CHECK-NEXT: %3:_(s8) = COPY $zp_0
    ; CHECK-NEXT: RTS
  }

  define void @formal_args_i16(i8 %first, i16 %second) {
  ; CHECK-LABEL: name: formal_args_i16
  entry:
  ; CHECK-LABEL: entry:
    ; CHECK-NEXT: liveins: $a, $x, $y
    ret void
    ; CHECK:      %0:_(s8) = COPY $a
    ; CHECK-NEXT: %2:_(s8) = COPY $x
    ; CHECK-NEXT: %3:_(s8) = COPY $y
    ; CHECK-NEXT: %1:_(s16) = G_MERGE_VALUES %2(s8), %3(s8)
    ; CHECK-NEXT: RTS
  }

  define void @call_ret() {
  ; CHECK-LABEL: name: call_ret
  entry:
  ; CHECK-LABEL: entry:
    %0 = call i8 @ret_i8()
    ret void
    ; CHECK:      JSR @ret_i8, mos6502_noregs, implicit-def $a
    ; CHECK-NEXT: %0:_(s8) = COPY $a
    ; CHECK-NEXT: RTS
  }

  define void @call_args() {
  ; CHECK-LABEL: name: call
  entry:
  ; CHECK-LABEL: entry:
    call void @formal_args_i8(i8 1, i8 2, i8 3, i8 4)
    ret void
    ; CHECK:      %0:_(s8) = G_CONSTANT i8 1
    ; CHECK:      %1:_(s8) = G_CONSTANT i8 2
    ; CHECK:      %2:_(s8) = G_CONSTANT i8 3
    ; CHECK:      %3:_(s8) = G_CONSTANT i8 4
    ; CHECK-NEXT: $a = COPY %0
    ; CHECK-NEXT: $x = COPY %1
    ; CHECK-NEXT: $y = COPY %2
    ; CHECK-NEXT: $zp_0 = COPY %3
    ; CHECK-NEXT: JSR @formal_args_i8, mos6502_noregs, implicit $a, implicit $x, implicit $y, implicit $zp_0
    ; CHECK-NEXT: RTS

  }
  define void @ptr(i8* %first, i16* %second) {
  ; CHECK-LABEL: name: ptr
  entry:
  ; CHECK-LABEL: entry:
    ; CHECK-NEXT: liveins: $zp_ptr_0, $zp_ptr_1
    ret void
    ; CHECK:      %0:_(p0) = COPY $zp_ptr_0
    ; CHECK-NEXT: %1:_(p0) = COPY $zp_ptr_1
  }
  define i8 @struct(i8 %first, %twobyte %second) {
  ; CHECK-LABEL: name: struct
  entry:
  ; CHECK-LABEL: entry:
    ; CHECK-NEXT: liveins: $a, $x, $y
    %0 = extractvalue %twobyte %second, 1
    ret i8 %0
    ; CHECK:      %0:_(s8) = COPY $a
    ; CHECK-NEXT: %1:_(s8) = COPY $x
    ; CHECK-NEXT: %2:_(s8) = COPY $y
    ; CHECK-NEXT: $a = COPY %2
    ; CHECK-NEXT: RTS implicit $a
  }
...

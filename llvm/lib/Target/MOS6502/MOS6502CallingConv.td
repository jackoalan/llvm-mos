let Entry = 1 in {
  def CC_MOS6502 : CallingConv<[
    CCIfPtr<CCAssignToReg<[
      ZP_PTR_1, ZP_PTR_2, ZP_PTR_3, ZP_PTR_4, ZP_PTR_5, ZP_PTR_6, ZP_PTR_7,
      ZP_PTR_8, ZP_PTR_9, ZP_PTR_10, ZP_PTR_11, ZP_PTR_12, ZP_PTR_13, ZP_PTR_14,
      ZP_PTR_15, ZP_PTR_16, ZP_PTR_17, ZP_PTR_18, ZP_PTR_19, ZP_PTR_20,
      ZP_PTR_21, ZP_PTR_22, ZP_PTR_23, ZP_PTR_24, ZP_PTR_25, ZP_PTR_26,
      ZP_PTR_27, ZP_PTR_28, ZP_PTR_29, ZP_PTR_30, ZP_PTR_31, ZP_PTR_32,
      ZP_PTR_33, ZP_PTR_34, ZP_PTR_35, ZP_PTR_36, ZP_PTR_37, ZP_PTR_38,
      ZP_PTR_39, ZP_PTR_40, ZP_PTR_41, ZP_PTR_42, ZP_PTR_43, ZP_PTR_44,
      ZP_PTR_45, ZP_PTR_46, ZP_PTR_47, ZP_PTR_48, ZP_PTR_49, ZP_PTR_50,
      ZP_PTR_51, ZP_PTR_52, ZP_PTR_53, ZP_PTR_54, ZP_PTR_55, ZP_PTR_56,
      ZP_PTR_57, ZP_PTR_58, ZP_PTR_59, ZP_PTR_60, ZP_PTR_61, ZP_PTR_62,
      ZP_PTR_63, ZP_PTR_64, ZP_PTR_65, ZP_PTR_66, ZP_PTR_67, ZP_PTR_68,
      ZP_PTR_69, ZP_PTR_70, ZP_PTR_71, ZP_PTR_72, ZP_PTR_73, ZP_PTR_74,
      ZP_PTR_75, ZP_PTR_76, ZP_PTR_77, ZP_PTR_78, ZP_PTR_79, ZP_PTR_80,
      ZP_PTR_81, ZP_PTR_82, ZP_PTR_83, ZP_PTR_84, ZP_PTR_85, ZP_PTR_86,
      ZP_PTR_87, ZP_PTR_88, ZP_PTR_89, ZP_PTR_90, ZP_PTR_91, ZP_PTR_92,
      ZP_PTR_93, ZP_PTR_94, ZP_PTR_95, ZP_PTR_96, ZP_PTR_97, ZP_PTR_98,
      ZP_PTR_99, ZP_PTR_100, ZP_PTR_101, ZP_PTR_102, ZP_PTR_103, ZP_PTR_104,
      ZP_PTR_105, ZP_PTR_106, ZP_PTR_107, ZP_PTR_108, ZP_PTR_109, ZP_PTR_110,
      ZP_PTR_111, ZP_PTR_112, ZP_PTR_113, ZP_PTR_114, ZP_PTR_115, ZP_PTR_116,
      ZP_PTR_117, ZP_PTR_118, ZP_PTR_119, ZP_PTR_120, ZP_PTR_121, ZP_PTR_122,
      ZP_PTR_123, ZP_PTR_124, ZP_PTR_125, ZP_PTR_126, ZP_PTR_127,
    ]>>,
    CCIfType<[i8], CCAssignToReg<[A, X, Y]>>,
  ]>;

  def RetCC_MOS6502 : CallingConv<[
    CCIfPtr<CCAssignToReg<[ZP_PTR_1]>>,
    CCIfType<[i8], CCAssignToReg<[A, X, Y]>>,
  ]>;
}

// All registers are caller saved.
def MOS6502_NoRegs : CalleeSavedRegs<(add)>;
//===-- MOSSubtarget.h - Define Subtarget for the MOS -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the MOS specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MOS_MOSSUBTARGET_H
#define LLVM_LIB_TARGET_MOS_MOSSUBTARGET_H

#include "MOSFrameLowering.h"
#include "MOSISelLowering.h"
#include "MOSInstrInfo.h"
#include "MOSRegisterInfo.h"

#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InlineAsmLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"

#include "llvm/CodeGen/TargetSubtargetInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "MOSGenSubtargetInfo.inc"

namespace llvm {

class MOSSubtarget : public MOSGenSubtargetInfo {
  MOSFrameLowering FrameLowering;
  MOSInstrInfo InstrInfo;
  MOSRegisterInfo RegInfo;
  MOSTargetLowering TLInfo;

  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<InlineAsmLowering> InlineAsmLoweringInfo;

public:
  MOSSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                   const TargetMachine &TM);
  /// Gets the ELF architecture for the e_flags field
  /// of an ELF object file.
  unsigned getELFArch() const {
    assert(ELFArch != 0 &&
           "every device must have an associate ELF architecture");
    return ELFArch;
  }

  bool enableMachineScheduler() const override { return true; }

  const MOSFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const MOSInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const MOSRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const MOSTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  const CallLowering *getCallLowering() const override {
    return CallLoweringInfo.get();
  }
  const LegalizerInfo *getLegalizerInfo() const override {
    return Legalizer.get();
  }
  const RegisterBankInfo *getRegBankInfo() const override {
    return RegBankInfo.get();
  }
  InstructionSelector *getInstructionSelector() const override {
    return InstSelector.get();
  }
  const InlineAsmLowering *getInlineAsmLowering() const override {
    return InlineAsmLoweringInfo.get();
  }

  bool enableSubRegLiveness() const override { return true; }

  void overrideSchedPolicy(MachineSchedPolicy &Policy,
                           unsigned NumRegionInstrs) const override;

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  bool hasTinyEncoding() const { return m_hasTinyEncoding; }

private:
  MOSSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                    StringRef CPU,
                                                    StringRef TuneCPU,
                                                    StringRef FS);
};

} // namespace llvm

#endif // not LLVM_LIB_TARGET_MOS_MOSSUBTARGET_H
  // Subtarget feature settings
  // See MOS.td for details.
  bool m_hasTinyEncoding;

  bool m_Has6502Insns;
  bool m_Has6502BCDInsns;
  bool m_Has6502XInsns;
  bool m_Has65C02Insns;
  bool m_HasR65C02Insns;
  bool m_HasW65C02Insns;
  bool m_HasW65816Insns;
  bool m_Has65EL02Insns;
  bool m_Has65CE02Insns;
  bool m_HasSWEET16Insns;

  bool m_LongRegisterNames;

  /// The ELF e_flags architecture.
  unsigned ELFArch;

  // Dummy member, used by FeatureSet's. We cannot have a SubtargetFeature with
  // no variable, so we instead bind pseudo features to this variable.
  bool m_FeatureSetDummy;
};

} // end namespace llvm

#endif // LLVM_MOS_SUBTARGET_H
